// Generated by CoffeeScript 1.6.3
/*
Copyright (c) 2013, Regents of the University of California
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

  1. Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


(function() {
  var ASPECT_RATIO, FADE_DURATION, MAX_INTENSITY, MAX_REVERSALS, MAX_ROTATION, MIN_INTENSITY, MIN_ORIENTATION_DIFFERENCE, MIN_PRACTICE_MODE_ORIENTATION, PRACTICE_CAPTION_MAX_STREAK, PRACTICE_MAX_STREAK, PRACTICE_START_INTENSITY, START_INTENSITY, STEPS_DOWN, STEPS_UP, catchStrayTouchStart, currentStimuli, endTimestamp, getNextOrientation, getNextTrial, getNextTrialDiv, getStimuli, getTaskState, inPracticeMode, intensity, lastIntensityChange, lastOrientation, numReversals, practiceStreakLength, registerResult, rotationCss, shouldShowPracticeCaption, showNextTrial, startTimestamp, trialNum;

  ASPECT_RATIO = 4 / 3;

  MAX_ROTATION = 60;

  MIN_ORIENTATION_DIFFERENCE = 20;

  MIN_PRACTICE_MODE_ORIENTATION = 25;

  FADE_DURATION = 400;

  MIN_INTENSITY = 1;

  MAX_INTENSITY = 89;

  STEPS_DOWN = 1;

  STEPS_UP = 3;

  PRACTICE_START_INTENSITY = 45;

  START_INTENSITY = 15;

  PRACTICE_MAX_STREAK = 4;

  PRACTICE_CAPTION_MAX_STREAK = 2;

  MAX_REVERSALS = 14;

  startTimestamp = null;

  endTimestamp = null;

  intensity = PRACTICE_START_INTENSITY;

  practiceStreakLength = 0;

  lastIntensityChange = 0;

  numReversals = 0;

  trialNum = 0;

  currentStimuli = null;

  lastOrientation = 0;

  inPracticeMode = function() {
    return practiceStreakLength < PRACTICE_MAX_STREAK;
  };

  shouldShowPracticeCaption = function() {
    return practiceStreakLength < PRACTICE_CAPTION_MAX_STREAK;
  };

  registerResult = function(event) {
    var change, correct, intensityChange, interpretation, lastIntensity, state, wasReversal;
    state = getTaskState();
    correct = event.data.skew === 0;
    change = correct ? -STEPS_DOWN : STEPS_UP;
    lastIntensity = intensity;
    intensity = tabcat.math.clamp(MIN_INTENSITY, lastIntensity + change, MAX_INTENSITY);
    intensityChange = intensity - lastIntensity;
    interpretation = {
      correct: correct,
      intensityChange: intensityChange
    };
    if (inPracticeMode()) {
      if (correct) {
        practiceStreakLength += 1;
        if (!inPracticeMode()) {
          intensity = START_INTENSITY;
          lastIntensityChange = 0;
        }
      } else {
        practiceStreakLength = 0;
      }
    } else {
      wasReversal = intensityChange * lastIntensityChange < 0 || intensityChange === 0;
      if (wasReversal) {
        numReversals += 1;
        interpretation.reversal = true;
      }
      lastIntensityChange = intensityChange;
    }
    tabcat.task.logEvent(state, event, interpretation);
    return trialNum += 1;
  };

  getNextTrial = function() {
    var line1Skew, line2Skew, orientation, skew, _ref;
    orientation = getNextOrientation();
    skew = intensity * tabcat.math.randomSign();
    _ref = _.shuffle([skew, 0]), line1Skew = _ref[0], line2Skew = _ref[1];
    return currentStimuli = {
      referenceLine: {
        orientation: orientation
      },
      line1: {
        skew: line1Skew
      },
      line2: {
        skew: line2Skew
      }
    };
  };

  getNextOrientation = function() {
    var orientation;
    while (true) {
      orientation = tabcat.math.randomUniform(-MAX_ROTATION, MAX_ROTATION);
      if (Math.abs(orientation - lastOrientation) < MIN_ORIENTATION_DIFFERENCE) {
        continue;
      }
      if (shouldShowPracticeCaption() && (Math.abs(orientation) < MIN_PRACTICE_MODE_ORIENTATION)) {
        continue;
      }
      lastOrientation = orientation;
      return orientation;
    }
  };

  showNextTrial = function(event) {
    var $nextTrialDiv, e, interpretation;
    if ((event != null ? event.preventDefault : void 0) != null) {
      event.preventDefault();
    }
    if ((event != null ? event.data : void 0) != null) {
      registerResult(event);
    }
    if (numReversals >= MAX_REVERSALS) {
      interpretation = {
        intensitiesAtReversal: (function() {
          var _i, _len, _ref, _ref1, _results;
          _ref = tabcat.task.getEventLog();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            if ((_ref1 = e.interpretation) != null ? _ref1.reversal : void 0) {
              _results.push(e.state.intensity);
            }
          }
          return _results;
        })()
      };
      return tabcat.task.finish({
        interpretation: interpretation
      });
    } else {
      $nextTrialDiv = getNextTrialDiv();
      $('#task').empty();
      $('#task').append($nextTrialDiv);
      tabcat.ui.fixAspectRatio($nextTrialDiv, ASPECT_RATIO);
      tabcat.ui.linkEmToPercentOfHeight($nextTrialDiv);
      return $nextTrialDiv.fadeIn({
        duration: FADE_DURATION
      });
    }
  };

  getNextTrialDiv = function() {
    var $containerDiv, $line1Div, $line1TargetAreaDiv, $line2Div, $line2TargetAreaDiv, $practiceCaptionDiv, $referenceLineDiv, $trialDiv, trial;
    trial = getNextTrial();
    $referenceLineDiv = $('<div></div>', {
      "class": 'line reference-line'
    });
    $line1Div = $('<div></div>', {
      "class": 'line line-1'
    });
    $line1Div.css(rotationCss(trial.line1.skew));
    $line1TargetAreaDiv = $('<div></div>', {
      "class": 'line line-1-target'
    });
    $line1TargetAreaDiv.css(rotationCss(trial.line1.skew));
    $line1TargetAreaDiv.bind('mousedown touchstart', trial.line1, showNextTrial);
    $line2Div = $('<div></div>', {
      "class": 'line line-2'
    });
    $line2Div.css(rotationCss(trial.line2.skew));
    $line2TargetAreaDiv = $('<div></div>', {
      "class": 'line line-2-target'
    });
    $line2TargetAreaDiv.css(rotationCss(trial.line2.skew));
    $line2TargetAreaDiv.bind('mousedown touchstart', trial.line2, showNextTrial);
    $containerDiv = $('<div></div>', {
      "class": 'line-container'
    });
    $containerDiv.css(rotationCss(trial.referenceLine.orientation));
    $containerDiv.append($referenceLineDiv, $line1Div, $line1TargetAreaDiv, $line2Div, $line2TargetAreaDiv);
    $containerDiv.bind('mousedown touchstart', catchStrayTouchStart);
    $trialDiv = $('<div></div>');
    $trialDiv.hide();
    if (shouldShowPracticeCaption()) {
      $practiceCaptionDiv = $('<div></div>', {
        "class": 'practice-caption'
      });
      $practiceCaptionDiv.html('Which is parallel to the <span class="target">blue</span> line?');
      $trialDiv.append($practiceCaptionDiv);
    }
    $trialDiv.append($containerDiv);
    return $trialDiv;
  };

  rotationCss = function(angle) {
    var value;
    if (angle === 0) {
      return {};
    }
    value = 'rotate(' + angle + 'deg)';
    return {
      transform: value,
      '-moz-transform': value,
      '-ms-transform': value,
      '-o-transform': value,
      '-webkit-transform': value
    };
  };

  getTaskState = function() {
    var state;
    state = {
      intensity: intensity,
      stimuli: getStimuli(),
      trialNum: trialNum
    };
    if (inPracticeMode()) {
      state.practiceMode = true;
    }
    return state;
  };

  getStimuli = function() {
    var $practiceCaption, stimuli;
    stimuli = currentStimuli;
    $practiceCaption = $('div.practice-caption:visible');
    if ($practiceCaption.length > 0) {
      stimuli = $.extend({}, stimuli, {
        practiceCaption: tabcat.task.getElementBounds($practiceCaption[0])
      });
    }
    return stimuli;
  };

  catchStrayTouchStart = function(event) {
    return tabcat.task.logEvent(getTaskState(), event);
  };

  this.initTask = function() {
    tabcat.task.start({
      trackViewport: true
    });
    tabcat.ui.turnOffBounce();
    tabcat.ui.requireLandscapeMode($('#task'));
    return $(showNextTrial);
  };

}).call(this);
