// Generated by CoffeeScript 1.7.1
(function() {
  var ASPECT_RATIO, DEFAULT_TRIALS, FIXATION_PERIOD_MAX, FIXATION_PERIOD_MIN, PRACTICE_BLOCK, PRACTICE_FEEDBACK_DISPLAY_DURATION, PRACTICE_MAX_BLOCKS, PRACTICE_MIN_CORRECT, PRACTICE_PRE_TRIAL_DELAY, PRE_TRIAL_DELAY, STIMULI_DISPLAY_DURATION, TESTING_BLOCK, TEST_TRIALS, clearStimuli, disableResponseButtons, enableResponseButtons, handleBeginClick, hideArrow, hideBeginButton, hideFeedback, hideResponseButtons, inPracticeMode, next, numCorrectInPractice, numPracticeBlocks, pp, practicePassed, showArrow, showBeginButton, showFeedback, showFixation, showInstructions, showResponseButtons, showStartScreen, showTrial, translations;

  translations = {
    en: {
      translation: {
        practice_html: '<p>You will be shown a series of arrows on the screen, ' + 'pointing to the left or to the right. For example:</p>' + '<img class="arrow" src="img/flanker/rrrrr.bmp"/>' + '<br/>or<br/>' + '<img class="arrow" src="img/flanker/llrll.bmp"/>' + '<p>Press the RIGHT button if the CENTER arrow ' + 'points to the right.</br>' + 'Press the LEFT button if the CENTER arrow ' + 'points to the left.</p>' + '<p>Try to respond as quickly and accurately as you can.</p>' + '<p>Try to keep your attention focused on the ' + 'cross ("+") at the center of the screen.</p>' + '<p>First we\'ll do a practice trial.</p>' + '<p>Tap the "Begin" button when you are ready to begin.</p>',
        additional_practice_html: '<p>You have completed the practice trial. ' + 'Let\'s do another practice trial.</p>' + '<p>You will be shown a series of arrows on the screen, ' + 'pointing to the left or to the right. For example:</p>' + '<img class="arrow" src="img/flanker/rrrrr.bmp"/>' + '</br>or</br>' + '<img class="arrow" src="img/flanker/llrll.bmp"/>' + '<p>Press the RIGHT button if the CENTER arrow ' + 'points to the right.</br>' + 'Press the LEFT button if the CENTER arrow ' + 'points to the left.</p>' + '<p>Try to respond as quickly and accurately as you can.</p>' + '<p>Try to keep your attention focused on the ' + 'cross ("+") at the center of the screen.</p>' + '<p>Tap the "Begin" button when you are ready to begin.</p>',
        testing_html: '<p>Now we\'ll move on to the task, the instructions are the same ' + 'except you will no longer receive feedback after your responses.</p>' + '<br/>' + '<p>Press the LEFT button if the CENTER arrow ' + 'points to the left.</p>' + '<p>Press the RIGHT button if the CENTER arrow ' + 'points to the right.</p>' + '<br/>' + '<p>Remember to keep your focus on the center cross ("+") and try to ' + 'respond as quickly as possible without making mistakes.</p>' + '<p>Tap the "Begin" button when you are ready to begin.</p>',
        feedback_correct_html: '<span class="blue">Correct!</span>',
        feedback_incorrect_html: '<span class="red">Incorrect.</span>',
        feedback_no_response_html: '<span class="red">No response detected.</span>'
      }
    }
  };

  TEST_TRIALS = [
    {
      'congruent': 0,
      'arrows': 'lllll',
      'upDown': 'up',
      'corrAns': 'left'
    }, {
      'congruent': 1,
      'arrows': 'rrrrr',
      'upDown': 'down',
      'corrAns': 'right'
    }, {
      'congruent': 0,
      'arrows': 'llrll',
      'upDown': 'up',
      'corrAns': 'right'
    }
  ];

  DEFAULT_TRIALS = [
    {
      'congruent': 0,
      'arrows': 'llrll',
      'upDown': 'up',
      'corrAns': 'right'
    }, {
      'congruent': 1,
      'arrows': 'lllll',
      'upDown': 'down',
      'corrAns': 'left'
    }, {
      'congruent': 0,
      'arrows': 'rrlrr',
      'upDown': 'up',
      'corrAns': 'left'
    }, {
      'congruent': 1,
      'arrows': 'rrrrr',
      'upDown': 'down',
      'corrAns': 'right'
    }, {
      'congruent': 0,
      'arrows': 'llrll',
      'upDown': 'down',
      'corrAns': 'right'
    }, {
      'congruent': 1,
      'arrows': 'lllll',
      'upDown': 'up',
      'corrAns': 'left'
    }, {
      'congruent': 0,
      'arrows': 'rrlrr',
      'upDown': 'down',
      'corrAns': 'left'
    }, {
      'congruent': 1,
      'arrows': 'rrrrr',
      'upDown': 'up',
      'corrAns': 'right'
    }
  ];

  PRACTICE_PRE_TRIAL_DELAY = 400;

  PRACTICE_FEEDBACK_DISPLAY_DURATION = 2000;

  PRACTICE_MIN_CORRECT = 2;

  PRACTICE_MAX_BLOCKS = 3;

  FIXATION_PERIOD_MIN = 1000;

  FIXATION_PERIOD_MAX = 3000;

  PRE_TRIAL_DELAY = 200;

  STIMULI_DISPLAY_DURATION = 4000;

  ASPECT_RATIO = 4 / 3;

  numCorrectInPractice = 0;

  numPracticeBlocks = 1;

  practicePassed = function() {
    return numPracticeBlocks <= PRACTICE_MAX_BLOCKS && numCorrectInPractice >= PRACTICE_MIN_CORRECT && PRACTICE_BLOCK.end();
  };

  inPracticeMode = true;

  pp = function(msg) {
    return $('#debug').append(JSON.stringify(msg)).append('</br>');
  };

  PRACTICE_BLOCK = new TrialHandler(1);

  TESTING_BLOCK = new TrialHandler(2);

  showFixation = function() {
    return $('#fixation').show();
  };

  showArrow = function(trial) {
    var $arrow;
    $arrow = $('#' + trial.arrows + '_' + trial.upDown);
    return $arrow.show();
  };

  hideArrow = function(trial) {
    var $arrow;
    $arrow = $('#' + trial.arrows + '_' + trial.upDown);
    return $arrow.hide();
  };

  clearStimuli = function() {
    var $stimuli;
    $stimuli = $('#stimuli');
    return $stimuli.children().hide();
  };

  showBeginButton = function() {
    var $beginButton;
    hideResponseButtons();
    $beginButton = $('#beginButton');
    $beginButton.one('click', handleBeginClick);
    return $beginButton.show();
  };

  hideBeginButton = function() {
    return $('#beginButton').hide();
  };

  showResponseButtons = function() {
    var $responseButtons;
    hideBeginButton();
    $responseButtons = $('#leftResponseButton, #rightResponseButton');
    return $responseButtons.show();
  };

  hideResponseButtons = function() {
    return $('#leftResponseButton, #rightResponseButton').hide();
  };

  enableResponseButtons = function() {
    var $responseButtons;
    $responseButtons = $('#leftResponseButton, #rightResponseButton');
    return $responseButtons.prop('disabled', false);
  };

  disableResponseButtons = function() {
    var $responseButtons;
    $responseButtons = $('#leftResponseButton, #rightResponseButton');
    return $responseButtons.prop('disabled', true);
  };

  showInstructions = function(translation) {
    var $instructions;
    clearStimuli();
    $instructions = $('#instructions');
    $instructions.html("<p></p><p></p>" + $.t(translation));
    return $instructions.show();
  };

  showFeedback = function(translation) {
    var $feedback;
    clearStimuli();
    $feedback = $('#feedback');
    $feedback.html($.t(translation));
    return $feedback.show();
  };

  hideFeedback = function() {
    var $feedback;
    $feedback = $('#feedback');
    return $feedback.hide();
  };

  showTrial = function(trial) {
    var deferred, fixationDuration;
    deferred = new $.Deferred();
    deferred.done(function(event, trial, fixationDuration, responseTime) {
      var correct, interpretation, response, state;
      clearStimuli();
      response = event.target.value.toLowerCase();
      correct = trial.corrAns === response;
      state = {
        response: response,
        trial: trial,
        fixationDuration: fixationDuration,
        responseTime: responseTime
      };
      interpretation = {
        correct: correct
      };
      if (inPracticeMode) {
        state.practiceMode = true;
        state.block = "practiceBlock" + numPracticeBlocks;
        if (correct) {
          numCorrectInPractice += 1;
          showFeedback('feedback_correct_html');
        } else {
          showFeedback('feedback_incorrect_html');
        }
        TabCAT.UI.wait(PRACTICE_FEEDBACK_DISPLAY_DURATION).then(function() {
          hideFeedback();
          if (practicePassed()) {
            inPracticeMode = false;
            showInstructions('testing_html');
            return showBeginButton();
          } else {
            return TabCAT.UI.wait(PRACTICE_PRE_TRIAL_DELAY).then(function() {
              return next();
            });
          }
        });
      } else {
        TabCAT.UI.wait(PRE_TRIAL_DELAY).then(function() {
          return next();
        });
        state.block = "testingBlock";
      }
      return TabCAT.Task.logEvent(state, event, interpretation);
    });
    deferred.fail(function(trial, fixationDuration) {
      var interpretation, state;
      hideArrow(trial);
      state = {
        response: "none",
        trial: trial,
        fixationDuration: fixationDuration,
        responseTime: 0
      };
      interpretation = {
        correct: false
      };
      if (inPracticeMode) {
        showFeedback('feedback_no_response_html');
        TabCAT.UI.wait(PRACTICE_FEEDBACK_DISPLAY_DURATION).then(function() {
          hideFeedback();
          return next();
        });
        state.block = "practiceBlock" + numPracticeBlocks;
      } else {
        state.block = "testingBlock";
        next();
      }
      return TabCAT.Task.logEvent(state, "timeout", interpretation);
    });
    fixationDuration = _.random(FIXATION_PERIOD_MIN, FIXATION_PERIOD_MAX);
    showFixation();
    return TabCAT.UI.wait(fixationDuration).then(function() {
      var trialStartTime;
      enableResponseButtons();
      trialStartTime = $.now();
      showArrow(trial);
      $('#leftResponseButton, #rightResponseButton').one('mousedown touchstart', function(event) {
        var responseTime;
        responseTime = $.now() - trialStartTime;
        event.preventDefault();
        event.stopPropagation();
        disableResponseButtons();
        return deferred.resolve(event, trial, fixationDuration, responseTime);
      });
      return TabCAT.UI.wait(STIMULI_DISPLAY_DURATION).then(function() {
        return deferred.reject(trial, fixationDuration);
      });
    });
  };

  next = function() {
    if (inPracticeMode) {
      if (PRACTICE_BLOCK.hasNext()) {
        return showTrial(PRACTICE_BLOCK.next());
      } else {
        if (numPracticeBlocks === PRACTICE_MAX_BLOCKS) {
          return TabCAT.Task.finish();
        } else {
          PRACTICE_BLOCK.reset();
          numCorrectInPractice = 0;
          numPracticeBlocks += 1;
          showInstructions('additional_practice_html');
          return showBeginButton();
        }
      }
    } else {
      if (TESTING_BLOCK.hasNext()) {
        return showTrial(TESTING_BLOCK.next());
      } else {
        return TabCAT.Task.finish();
      }
    }
  };

  handleBeginClick = function(event) {
    clearStimuli();
    showResponseButtons();
    disableResponseButtons();
    return next();
  };

  showStartScreen = function() {
    clearStimuli();
    showInstructions('practice_html');
    return showBeginButton();
  };

  this.initTask = function() {
    TabCAT.Task.start({
      i18n: {
        resStore: translations
      },
      trackViewport: true
    });
    TabCAT.UI.turnOffBounce();
    TabCAT.UI.enableFastClick();
    return $(function() {
      var $rectangle;
      $rectangle = $('#rectangle');
      TabCAT.UI.fixAspectRatio($rectangle, ASPECT_RATIO);
      TabCAT.UI.linkEmToPercentOfHeight($rectangle);
      return showStartScreen();
    });
  };

}).call(this);
