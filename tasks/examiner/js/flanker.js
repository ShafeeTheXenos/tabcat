// Generated by CoffeeScript 1.7.1
(function() {
  var ASPECT_RATIO, CORRECT_ARROW_INDEX, DEFAULT_TRIALS, FIXATION_PERIOD_MAX, FIXATION_PERIOD_MIN, PRACTICE_FEEDBACK_DISPLAY_DURATION, PRACTICE_MAX_BLOCKS, PRACTICE_MIN_CORRECT, PRACTICE_PRE_TRIAL_DELAY, PRE_TRIAL_DELAY, STIMULI_DISPLAY_DURATION, TEST_TRIALS, clearStimuli, createPracticeBlock, createTestingBlock, disableResponseButtons, enableResponseButtons, fixationDuration, getStimuli, getTaskState, handleBeginClick, handleStrayTouchStart, hideArrow, hideBeginButton, hideFeedback, hideResponseButtons, inPracticeMode, isCongruent, isCorrect, loadStimuli, next, numCorrectInPractice, numPracticeBlocks, pp, practicePassed, responseButtonsEnabled, showArrow, showBeginButton, showFeedback, showFixation, showInstructions, showResponseButtons, showStartScreen, showTrial, translations, trialBlock, trialIndex;

  translations = {
    en: {
      translation: {
        begin_html: 'Begin',
        practice_html: {
          1: 'You will be shown a series of arrows on the screen, ' + 'pointing to the left or to the right. For example:',
          2: 'or',
          3: 'Press the RIGHT button if the CENTER arrow ' + 'points to the right.<br/>' + 'Press the LEFT button if the CENTER arrow ' + 'points to the left.',
          4: 'Try to respond as quickly and accurately as you can.',
          5: 'Try to keep your attention focused on the ' + 'cross ("+") at the center of the screen.',
          6: 'First we\'ll do a practice trial.',
          7: 'Tap the "Begin" button when you are ready to begin.'
        },
        additional_practice_html: {
          1: 'You have completed the practice trial. ' + 'Let\'s do another practice trial.',
          2: 'You will be shown a series of arrows on the screen, ' + 'pointing to the left or to the right. For example:',
          3: 'or',
          4: 'Press the RIGHT button if the CENTER arrow ' + 'points to the right.</br>' + 'Press the LEFT button if the CENTER arrow ' + 'points to the left.',
          5: 'Try to respond as quickly and accurately as you can.',
          6: 'Try to keep your attention focused on the ' + 'cross ("+") at the center of the screen.',
          7: 'Tap the "Begin" button when you are ready to begin.'
        },
        testing_html: {
          1: 'Now we\'ll move on to the task, the instructions are ' + 'the same except you will no longer receive feedback ' + 'after your responses.</br>',
          2: 'Press the LEFT button if the CENTER arrow ' + 'points to the left.',
          3: 'Press the RIGHT button if the CENTER arrow ' + 'points to the right.</br>',
          4: 'Remember to keep your focus on the center cross ("+") and try to ' + 'respond as quickly as possible without making mistakes.',
          5: 'Tap the "Begin" button when you are ready to begin.'
        },
        feedback_correct: 'Correct!',
        feedback_incorrect: 'Incorrect.',
        feedback_no_response: 'No response detected.'
      }
    },
    es: {
      translation: {
        begin_html: 'Begin',
        practice_html: {
          1: 'La pantalla mostrará una serie de flechas que señalan ' + 'hacia la izquierda o hacia la derecha. Por ejemplo:',
          2: 'O bien',
          3: 'Presione el botón IZQUIERDO si la flecha CENTRAL ' + 'señala hacia la izquierda.</br>' + 'Presione el botón DERECHO si la flecha CENTRAL ' + 'señala hacia la derecha.<br/>',
          4: 'Intente responder tan rápido y preciso como pueda.',
          5: 'Intente mantener su atención concentrada en la cruz (“+”) ' + 'en el centro de la pantalla.',
          6: 'Primero haremos una prueba de práctica.',
          7: 'Presione la BARRA ESPACIADORA para comenzar.'
        },
        additional_practice_html: {
          1: 'Ha completado la prueba de práctica. ' + 'Hagamos otra prueba de práctica.',
          2: 'La pantalla mostrará una serie de flechas que señalan hacia ' + 'la izquierda o hacia la derecha. Por ejemplo:',
          3: 'O bien',
          4: 'Presione el botón DERECHO si la flecha CENTRAL ' + 'señala hacia la derecha.</br>' + 'Presione el botón IZQUIERDO si la flecha CENTRAL ' + 'señala hacia la izquierda.',
          5: 'Intente responder tan rápido y preciso como pueda.',
          6: 'Intente mantener su atención concentrada en la cruz (“+”) ' + 'en el centro de la pantalla.',
          7: 'Presione la BARRA ESPACIADORA para comenzar.'
        },
        testing_html: {
          1: 'Ahora pasaremos a la tarea. Las instrucciones son las mismas, ' + 'sólo que ya no recibirá comentarios o sugerencias ' + 'después de sus respuestas.',
          2: 'Presione el botón IZQUIERDO si la flecha CENTRAL ' + 'señala hacia la izquierda.',
          3: 'Presione el botón DERECHO si la flecha CENTRAL ' + 'señala hacia la derecha.',
          4: 'Recuerde mantener el foco en la cruz central (“+”) e intente ' + 'responder lo más rápido posible sin cometer errores.',
          5: 'Presione la BARRA ESPACIADORA cuando esté listo para empezar.'
        },
        feedback_correct: 'Correcto!',
        feedback_incorrect: 'Incorrecto.',
        feedback_no_response: 'No responda.'
      }
    },
    zh: {
      translation: {
        begin_html: '開始',
        practice_html: {
          1: '您將看到一系列指向左邊或右邊的箭頭。列如：',
          2: '或',
          3: '如果中間的箭頭指向右邊，請按右箭頭鍵。</br>' + '如果中間的箭頭指向左邊，請按左箭頭鍵。',
          4: '請您儘快和準確地完成這項目。',
          5: '儘量把您的注意力保持集中在屏幕中心的十字架 “＋”。',
          6: '首先，我們會試一次。',
          7: '請按空格鍵開始。'
        },
        additional_practice_html: {
          1: '您以經完成練習測試。我們再練習一下。',
          2: '您將看到一系列指向左邊或右邊的箭頭。列如：',
          3: '或',
          4: '如果中間的箭頭指向右邊，請按右箭頭鍵。</br>' + '如果中間的箭頭指向左邊，請按左箭頭鍵。',
          5: '請您儘快和準確地完成這項目。',
          6: '儘量把您的注意力保持集中在屏幕中心的十字架 “＋”。',
          7: '請按空格鍵開始。'
        },
        testing_html: {
          1: '現在我們開始測試。說明相同，但是您不會再收到電腦的答覆。',
          2: '如果中間的箭頭指向右邊，請按右箭頭鍵。',
          3: '如果中間的箭頭指向左邊，請按左箭頭鍵。',
          4: '請您記住儘量把您的注意力保持集中在屏幕中心的十字架 “＋”，' + '也請您儘快和準確地完成這項目。',
          5: '當您準備開始時，請按空格鍵。'
        },
        feedback_correct: '正確!',
        feedback_incorrect: '錯誤。',
        feedback_no_response: '沒有收到任何答覆。'
      }
    }
  };

  TEST_TRIALS = [
    {
      'arrows': 'lllll',
      'upDown': 'up'
    }, {
      'arrows': 'lllll',
      'upDown': 'down'
    }, {
      'arrows': 'rrrrr',
      'upDown': 'up'
    }
  ];

  DEFAULT_TRIALS = [
    {
      'arrows': 'lllll',
      'upDown': 'up'
    }, {
      'arrows': 'lllll',
      'upDown': 'down'
    }, {
      'arrows': 'rrrrr',
      'upDown': 'up'
    }, {
      'arrows': 'rrrrr',
      'upDown': 'down'
    }, {
      'arrows': 'llrll',
      'upDown': 'up'
    }, {
      'arrows': 'llrll',
      'upDown': 'down'
    }, {
      'arrows': 'rrlrr',
      'upDown': 'up'
    }, {
      'arrows': 'rrlrr',
      'upDown': 'down'
    }
  ];

  CORRECT_ARROW_INDEX = 2;

  PRACTICE_PRE_TRIAL_DELAY = 400;

  PRACTICE_FEEDBACK_DISPLAY_DURATION = 2000;

  PRACTICE_MIN_CORRECT = 2;

  PRACTICE_MAX_BLOCKS = 3;

  FIXATION_PERIOD_MIN = 1000;

  FIXATION_PERIOD_MAX = 3000;

  PRE_TRIAL_DELAY = 200;

  STIMULI_DISPLAY_DURATION = 4000;

  ASPECT_RATIO = 4 / 3;

  createPracticeBlock = function() {
    return Examiner.generateTrials(TEST_TRIALS, 1, 'sequential');
  };

  createTestingBlock = function() {
    return Examiner.generateTrials(TEST_TRIALS, 2, 'sequential');
  };

  numCorrectInPractice = 0;

  numPracticeBlocks = 1;

  practicePassed = function() {
    return numPracticeBlocks <= PRACTICE_MAX_BLOCKS && numCorrectInPractice >= PRACTICE_MIN_CORRECT;
  };

  inPracticeMode = true;

  trialBlock = createPracticeBlock();

  trialIndex = -1;

  fixationDuration = null;

  pp = function(msg) {
    return $('#debug').append(JSON.stringify(msg)).append('</br>');
  };

  showFixation = function() {
    return $('#fixation').show();
  };

  showArrow = function(arrows, upDown) {
    return $('#' + arrows + '_' + upDown).show();
  };

  hideArrow = function(arrows, upDown) {
    return $('#' + arrows + '_' + upDown).hide();
  };

  clearStimuli = function() {
    var $stimuli;
    $stimuli = $('#stimuli');
    return $stimuli.children().hide();
  };

  showBeginButton = function() {
    var $beginButton;
    hideResponseButtons();
    $beginButton = $('#beginButton');
    $beginButton.one('mousedown touchstart', handleBeginClick);
    return $beginButton.show();
  };

  hideBeginButton = function() {
    return $('#beginButton').hide();
  };

  showResponseButtons = function() {
    var $responseButtons;
    hideBeginButton();
    $responseButtons = $('#leftResponseButton, #rightResponseButton');
    return $responseButtons.show();
  };

  hideResponseButtons = function() {
    return $('#leftResponseButton, #rightResponseButton').hide();
  };

  enableResponseButtons = function() {
    var $responseButtons;
    $responseButtons = $('#leftResponseButton, #rightResponseButton');
    return $responseButtons.prop('disabled', false);
  };

  disableResponseButtons = function() {
    var $responseButtons;
    $responseButtons = $('#leftResponseButton, #rightResponseButton');
    return $responseButtons.prop('disabled', true);
  };

  responseButtonsEnabled = function() {
    return !$('#leftResponseButton').prop('disabled');
  };

  showInstructions = function(translation) {
    var $html, $instructions, $translation;
    clearStimuli();
    $translation = $.t(translation, {
      returnObjectTrees: true
    });
    $html = (function() {
      switch (translation) {
        case 'practice_html':
        case 'additional_practice_html':
          return _.map($translation, function(value, key) {
            if ((translation === 'practice_html' && key === '2') || (translation === 'additional_practice_html' && key === '3')) {
              return '<img class="instructionsArrow" src="img/flanker/rrrrr.png"/>' + '<br/>' + value + '<br/>' + '<img class="instructionsArrow" src="img/flanker/llrll.png"/>';
            } else {
              return '<p>' + value + '</p>';
            }
          });
        case 'testing_html':
          return _.map($translation, function(value, key) {
            return '<p>' + value + '</p>';
          });
        default:
          return [];
      }
    })();
    $instructions = $('#instructions');
    $instructions.html("<p></p><p></p>" + $html.join(''));
    return $instructions.show();
  };

  showFeedback = function(translation) {
    var $feedback, $html, $translation;
    clearStimuli();
    $translation = $.t(translation);
    $html = (function() {
      switch (translation) {
        case 'feedback_correct':
          return '<span class="blue">' + $translation + '</span>';
        case 'feedback_incorrect':
        case 'feedback_no_response':
          return '<span class="red">' + $translation + '</span>';
        default:
          return translation;
      }
    })();
    $feedback = $('#feedback');
    $feedback.html($html);
    return $feedback.show();
  };

  hideFeedback = function() {
    return $('#feedback').hide();
  };

  isCorrect = function(arrows, response) {
    return arrows.charAt(CORRECT_ARROW_INDEX) === response;
  };

  isCongruent = function(arrows) {
    return arrows.charAt(CORRECT_ARROW_INDEX) === arrows.charAt(CORRECT_ARROW_INDEX + 1);
  };

  showTrial = function(trial) {
    var deferred;
    deferred = new $.Deferred();
    deferred.done(function(event, responseTime) {
      var correct, interpretation, response;
      disableResponseButtons();
      clearStimuli();
      response = event.delegateTarget.value;
      correct = isCorrect(trial.arrows, response);
      interpretation = {
        response: response,
        responseTime: responseTime,
        correct: correct
      };
      TabCAT.Task.logEvent(getTaskState(), event, interpretation);
      if (inPracticeMode) {
        if (correct) {
          numCorrectInPractice += 1;
          showFeedback('feedback_correct');
        } else {
          showFeedback('feedback_incorrect');
        }
        return TabCAT.UI.wait(PRACTICE_FEEDBACK_DISPLAY_DURATION).then(function() {
          hideFeedback();
          return TabCAT.UI.wait(PRACTICE_PRE_TRIAL_DELAY).then(function() {
            return next();
          });
        });
      } else {
        return TabCAT.UI.wait(PRE_TRIAL_DELAY).then(function() {
          return next();
        });
      }
    });
    deferred.fail(function() {
      var interpretation;
      disableResponseButtons();
      hideArrow(trial.arrows, trial.upDown);
      interpretation = {
        response: null,
        responseTime: 0,
        correct: false
      };
      TabCAT.Task.logEvent(getTaskState(), "timeout", interpretation);
      if (inPracticeMode) {
        showFeedback('feedback_no_response');
        return TabCAT.UI.wait(PRACTICE_FEEDBACK_DISPLAY_DURATION).then(function() {
          hideFeedback();
          return next();
        });
      } else {
        return next();
      }
    });
    fixationDuration = _.random(FIXATION_PERIOD_MIN, FIXATION_PERIOD_MAX);
    pp(fixationDuration);
    showFixation();
    return TabCAT.UI.wait(fixationDuration).then(function() {
      var trialStartTime;
      enableResponseButtons();
      trialStartTime = $.now();
      showArrow(trial.arrows, trial.upDown);
      $('#leftResponseButton, #rightResponseButton').one('mousedown touchstart', function(event) {
        var responseTime;
        responseTime = $.now() - trialStartTime;
        event.preventDefault();
        event.stopPropagation();
        return deferred.resolve(event, responseTime);
      });
      return TabCAT.UI.wait(STIMULI_DISPLAY_DURATION).then(function() {
        return deferred.reject();
      });
    });
  };

  next = function() {
    if (trialIndex < trialBlock.length - 1) {
      trialIndex += 1;
      return showTrial(trialBlock[trialIndex]);
    } else {
      if (inPracticeMode) {
        if (practicePassed()) {
          inPracticeMode = false;
          trialBlock = createTestingBlock();
          trialIndex = -1;
          showInstructions('testing_html');
          return showBeginButton();
        } else if (numPracticeBlocks === PRACTICE_MAX_BLOCKS) {
          return TabCAT.Task.finish();
        } else {
          trialBlock = createPracticeBlock();
          trialIndex = -1;
          numCorrectInPractice = 0;
          numPracticeBlocks += 1;
          showInstructions('additional_practice_html');
          return showBeginButton();
        }
      } else {
        return TabCAT.Task.finish();
      }
    }
  };

  handleBeginClick = function(event) {
    event.preventDefault();
    event.stopPropagation();
    clearStimuli();
    showResponseButtons();
    disableResponseButtons();
    return next();
  };

  getStimuli = function() {
    var stimuli, trial;
    trial = trialBlock[trialIndex];
    stimuli = {
      arrows: trial.arrows,
      upDown: trial.upDown,
      congruent: isCongruent(trial.arrows),
      fixationDuration: fixationDuration
    };
    return stimuli;
  };

  getTaskState = function() {
    var state;
    state = {
      trialNum: trialIndex,
      stimuli: getStimuli()
    };
    if (inPracticeMode) {
      state.practiceMode = true;
      state.trialBlock = "practiceBlock" + numPracticeBlocks;
    } else {
      state.trialBlock = "testingBlock";
    }
    return state;
  };

  handleStrayTouchStart = function(event) {
    event.preventDefault();
    if (responseButtonsEnabled()) {
      return TabCAT.Task.logEvent(getTaskState(), event, "stray");
    }
  };

  showStartScreen = function() {
    showInstructions('practice_html');
    $('#beginButton').html($.t('begin_html'));
    return showBeginButton();
  };

  loadStimuli = function() {
    var $imgs;
    $imgs = _.map(DEFAULT_TRIALS, function(trial) {
      return '<img id="' + trial.arrows + '_' + (trial.upDown === 'up' ? 'up' : 'down') + '" src="img/flanker/' + trial.arrows + '.png" ' + 'style="display:none" ' + 'class="arrow center ' + (trial.upDown === 'up' ? 'aboveFixation"' : 'belowFixation"') + '>';
    });
    $imgs = $imgs.join('') + '<img id="fixation" ' + 'src="img/flanker/fixation.png" ' + 'class="center fixation" ' + 'style="display:none">';
    return $('#stimuli').append($imgs);
  };

  this.initTask = function() {
    TabCAT.Task.start({
      i18n: {
        resStore: translations
      },
      trackViewport: true
    });
    TabCAT.UI.turnOffBounce();
    TabCAT.UI.enableFastClick();
    return $(function() {
      var $rectangle, $task;
      $task = $('#task');
      $rectangle = $('#rectangle');
      $task.on('mousedown touchstart', handleStrayTouchStart);
      TabCAT.UI.fixAspectRatio($rectangle, ASPECT_RATIO);
      TabCAT.UI.linkEmToPercentOfHeight($rectangle);
      loadStimuli();
      disableResponseButtons();
      return showStartScreen();
    });
  };

}).call(this);
