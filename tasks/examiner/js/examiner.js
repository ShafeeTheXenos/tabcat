// Generated by CoffeeScript 1.7.1
(function() {
  if (this.Examiner == null) {
    this.Examiner = {};
  }

  Examiner.generateTrials = function(trialList, numReps) {
    if (numReps == null) {
      numReps = 1;
    } else {
      numReps = Math.max(1, numReps);
    }
    return {
      constructor: function(numReps, trialList) {
        this.numReps = numReps != null ? numReps : 1;
        this.trialList = trialList != null ? trialList : TEST_TRIALS;
        this.numReps = Math.max(1, this.numReps);
        this.trialListLength = this.trialList.length;
        return this.reset();
      },
      reset: function() {
        this.currentRepNum = 0;
        this.currentTrialNum = -1;
        this.currentTrial = false;
        this.finished = false;
        return this.sequenceIndices = this.createSequence();
      },
      createSequence: function() {
        var i, trialListIndices, _i, _ref, _results;
        trialListIndices = _.range(this.trialListLength);
        _results = [];
        for (i = _i = 0, _ref = this.numReps; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(_.shuffle(trialListIndices));
        }
        return _results;
      },
      hasNext: function() {
        return !this.end();
      },
      end: function() {
        return this.currentRepNum === (this.numReps - 1) && this.currentTrialNum === (this.trialListLength - 1);
      },
      next: function() {
        var index;
        this.currentTrialNum += 1;
        if (this.currentTrialNum === this.trialListLength) {
          this.currentTrialNum = 0;
          this.currentRepNum += 1;
        }
        if (this.currentRepNum >= this.numReps) {
          this.finished = true;
        }
        if (this.finished) {
          return this.currentTrial = false;
        } else {
          index = this.sequenceIndices[this.currentRepNum][this.currentTrialNum];
          return this.currentTrial = this.trialList[index];
        }
      },
      getSequence: function() {
        return this.sequenceIndices;
      },
      pp: function() {
        return pp(this.sequenceIndices);
      }
    };
  };

}).call(this);
